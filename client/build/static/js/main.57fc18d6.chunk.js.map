{"version":3,"sources":["components/TableEmployees.js","components/Spinner.js","components/Table.js","App.js","registerServiceWorker.js","index.js"],"names":["TableEmployees","props","employeesList","employees","map","employee","mondayLoads","Shifts","filter","shift","day","shiftName","tuesdayLoads","wednesdayLoads","thursdayLoads","fridayLoads","totals","length","employeeName","id","className","override","css","Spinner","isLoading","children","spinner","size","text","active","Index","useState","setEmployees","shiftsList","setShiftsList","showButtonIndex","setShowButtonIndex","hideButtons","setHideButtons","setIsLoading","setDay","shiftId","setShiftId","shiftToBeAdded","setShiftToBeAdded","employeeNameInTable","setEmployeeNameInTable","useEffect","fetchInitialData","fetchEmployees","a","fetchShiftsList","error","console","log","resetWholeSchedule","updatedObj","monday","tuesday","wednesday","thursday","friday","shiftRequest1","axios","put","shiftRequest2","shiftRequest3","shiftRequest4","shiftRequest5","shiftRequest6","shiftRequest7","shiftRequest8","shiftRequest9","shiftRequest10","shiftRequestReset","delete","all","then","spread","catch","errors","get","employeesResponse","data","shifstListResponse","toggleButtons","e","preventDefault","Number","target","res","matchDay","Object","keys","key","addShiftToEmployee","employeeId","shiftObj","dayToBeUpdated","shiftIdToDelete","err","updateDatabase","post","checkForLunch","checkForShifts","checkForShiftsInAWeek","checkForShiftsWithNoLunch","checkForTwoPlacesMorning","checkForTwoPlacesAfternoonPL","checkForTwoPlacesAfternoonUS","checkForTwoPlacesAfternoonDS","alert","shifts","onClick","App","Table","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"8QAqFeA,EAlFQ,SAACC,GACtB,IAAMC,EAAgBD,EAAME,UAAUC,KAAI,SAACC,GACzC,IAAMC,EAAcD,EAASE,OAAOC,QAClC,SAACC,GAAD,MACgB,WAAdA,EAAMC,KACc,YAApBD,EAAME,WACc,YAApBF,EAAME,WACc,YAApBF,EAAME,WACc,YAApBF,EAAME,aAEJC,EAAeP,EAASE,OAAOC,QACnC,SAACC,GAAD,MACgB,YAAdA,EAAMC,KACc,YAApBD,EAAME,WACc,YAApBF,EAAME,WACc,YAApBF,EAAME,WACc,YAApBF,EAAME,aAEJE,EAAiBR,EAASE,OAAOC,QACrC,SAACC,GAAD,MACgB,cAAdA,EAAMC,KACc,YAApBD,EAAME,WACc,YAApBF,EAAME,WACc,YAApBF,EAAME,WACc,YAApBF,EAAME,aAEJG,EAAgBT,EAASE,OAAOC,QACpC,SAACC,GAAD,MACgB,aAAdA,EAAMC,KACc,YAApBD,EAAME,WACc,YAApBF,EAAME,WACc,YAApBF,EAAME,WACc,YAApBF,EAAME,aAEJI,EAAcV,EAASE,OAAOC,QAClC,SAACC,GAAD,MACgB,WAAdA,EAAMC,KACc,YAApBD,EAAME,WACc,YAApBF,EAAME,WACc,YAApBF,EAAME,WACc,YAApBF,EAAME,aAEJK,EACJV,EAAYW,OACZL,EAAaK,OACbJ,EAAeI,OACfH,EAAcG,OACdF,EAAYE,OACd,OACE,+BACE,6BAAKZ,EAASa,eACd,6BAAKZ,EAAYW,SACjB,6BAAKL,EAAaK,SAClB,6BAAKJ,EAAeI,SACpB,6BAAKH,EAAcG,SACnB,6BAAKF,EAAYE,SAEjB,6BAAKD,MAREX,EAASc,OAatB,OACE,8BACE,uBAAOC,UAAU,OAAjB,SACE,kCACE,+BACE,+CACA,wCACA,yCACA,2CACA,0CACA,wCACA,2CAEDlB,U,0DCzELmB,EAAWC,cAAH,8EAKC,SAASC,IAA0C,IAAD,yDAAPtB,MAAxBuB,EAA+B,EAA/BA,UAAWC,EAAoB,EAApBA,SAC3C,OACE,cAAC,IAAD,CACEC,QAAS,cAAC,IAAD,CAAcC,KAAM,IAAKL,IAAKD,IACvCO,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","file":"static/js/main.57fc18d6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./table.css\";\r\n\r\nconst TableEmployees = (props) => {\r\n  const employeesList = props.employees.map((employee) => {\r\n    const mondayLoads = employee.Shifts.filter(\r\n      (shift) =>\r\n        shift.day === \"monday\" &&\r\n        shift.shiftName !== \"Lunch A\" &&\r\n        shift.shiftName !== \"Lunch B\" &&\r\n        shift.shiftName !== \"Lunch C\" &&\r\n        shift.shiftName !== \"Lunch D\"\r\n    );\r\n    const tuesdayLoads = employee.Shifts.filter(\r\n      (shift) =>\r\n        shift.day === \"tuesday\" &&\r\n        shift.shiftName !== \"Lunch A\" &&\r\n        shift.shiftName !== \"Lunch B\" &&\r\n        shift.shiftName !== \"Lunch C\" &&\r\n        shift.shiftName !== \"Lunch D\"\r\n    );\r\n    const wednesdayLoads = employee.Shifts.filter(\r\n      (shift) =>\r\n        shift.day === \"wednesday\" &&\r\n        shift.shiftName !== \"Lunch A\" &&\r\n        shift.shiftName !== \"Lunch B\" &&\r\n        shift.shiftName !== \"Lunch C\" &&\r\n        shift.shiftName !== \"Lunch D\"\r\n    );\r\n    const thursdayLoads = employee.Shifts.filter(\r\n      (shift) =>\r\n        shift.day === \"thursday\" &&\r\n        shift.shiftName !== \"Lunch A\" &&\r\n        shift.shiftName !== \"Lunch B\" &&\r\n        shift.shiftName !== \"Lunch C\" &&\r\n        shift.shiftName !== \"Lunch D\"\r\n    );\r\n    const fridayLoads = employee.Shifts.filter(\r\n      (shift) =>\r\n        shift.day === \"friday\" &&\r\n        shift.shiftName !== \"Lunch A\" &&\r\n        shift.shiftName !== \"Lunch B\" &&\r\n        shift.shiftName !== \"Lunch C\" &&\r\n        shift.shiftName !== \"Lunch D\"\r\n    );\r\n    const totals =\r\n      mondayLoads.length +\r\n      tuesdayLoads.length +\r\n      wednesdayLoads.length +\r\n      thursdayLoads.length +\r\n      fridayLoads.length;\r\n    return (\r\n      <tr key={employee.id}>\r\n        <td>{employee.employeeName}</td>\r\n        <td>{mondayLoads.length}</td>\r\n        <td>{tuesdayLoads.length}</td>\r\n        <td>{wednesdayLoads.length}</td>\r\n        <td>{thursdayLoads.length}</td>\r\n        <td>{fridayLoads.length}</td>\r\n\r\n        <td>{totals}</td>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <table className=\"mt-2\">\r\n        <tbody>\r\n          <tr>\r\n            <th>Staff Members</th>\r\n            <th>Monday</th>\r\n            <th>Tuesday</th>\r\n            <th>Wednesday</th>\r\n            <th>Thursday</th>\r\n            <th>Friday</th>\r\n            <th>Totals</th>\r\n          </tr>\r\n          {employeesList}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TableEmployees;\r\n","import LoadingOverlay from \"react-loading-overlay\";\r\nimport BounceLoader from \"react-spinners/BounceLoader\";\r\nimport \"./spinner.css\";\r\nimport { css } from \"@emotion/core\";\r\n\r\nconst override = css`\r\n  display: block;\r\n  margin: -200px auto 0 auto;\r\n`;\r\n\r\nexport default function Spinner({ isLoading, children } = props) {\r\n  return (\r\n    <LoadingOverlay\r\n      spinner={<BounceLoader size={150} css={override} />}\r\n      text=\"Please wait...\"\r\n      active={isLoading}\r\n    >\r\n      {children}\r\n    </LoadingOverlay>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./table.css\";\r\nimport TableEmployees from \"./TableEmployees\";\r\nimport Spinner from \"./Spinner\";\r\n\r\nconst Index = () => {\r\n  const [employees, setEmployees] = useState([]);\r\n  const [shiftsList, setShiftsList] = useState([]);\r\n  const [showButtonIndex, setShowButtonIndex] = useState(\"\");\r\n  const [hideButtons, setHideButtons] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [day, setDay] = useState(\"\");\r\n  const [shiftId, setShiftId] = useState(\"\");\r\n  const [shiftToBeAdded, setShiftToBeAdded] = useState(\"\");\r\n  const [employeeNameInTable, setEmployeeNameInTable] = useState(\"\");\r\n  const [morningUS, setMorningUS] = useState(null);\r\n  const [morningDS, setMorningDS] = useState(null);\r\n  const [morningPL, setMorningPL] = useState(null);\r\n  const [lunchA, setLunchA] = useState(null);\r\n  const [lunchB, setLunchB] = useState(null);\r\n  const [lunchC, setLunchC] = useState(null);\r\n  const [lunchD, setLunchD] = useState(null);\r\n  const [afternoonUS, setAfternoonUS] = useState(null);\r\n  const [afternoonDS, setAfternoonDS] = useState(null);\r\n  const [afternoonPL, setAfternoonPL] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchInitialData();\r\n    fetchEmployees();\r\n  }, []);\r\n\r\n  const fetchInitialData = async () => {\r\n    try {\r\n      fetchShiftsList();\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const resetWholeSchedule = async () => {\r\n    const updatedObj = {\r\n      monday: null,\r\n      tuesday: null,\r\n      wednesday: null,\r\n      thursday: null,\r\n      friday: null,\r\n    };\r\n    const shiftRequest1 = axios.put(`/shifts_list/1`, updatedObj);\r\n    const shiftRequest2 = axios.put(`/shifts_list/2`, updatedObj);\r\n    const shiftRequest3 = axios.put(`/shifts_list/3`, updatedObj);\r\n    const shiftRequest4 = axios.put(`/shifts_list/4`, updatedObj);\r\n    const shiftRequest5 = axios.put(`/shifts_list/5`, updatedObj);\r\n    const shiftRequest6 = axios.put(`/shifts_list/6`, updatedObj);\r\n    const shiftRequest7 = axios.put(`/shifts_list/7`, updatedObj);\r\n    const shiftRequest8 = axios.put(`/shifts_list/8`, updatedObj);\r\n    const shiftRequest9 = axios.put(`/shifts_list/9`, updatedObj);\r\n    const shiftRequest10 = axios.put(`/shifts_list/11`, updatedObj);\r\n    const shiftRequestReset = axios.delete(`/shifts/reset`);\r\n\r\n    setIsLoading(true);\r\n    await axios\r\n      .all([\r\n        shiftRequest1,\r\n        shiftRequest2,\r\n        shiftRequest3,\r\n        shiftRequest4,\r\n        shiftRequest5,\r\n        shiftRequest6,\r\n        shiftRequest7,\r\n        shiftRequest8,\r\n        shiftRequest9,\r\n        shiftRequest10,\r\n        shiftRequestReset,\r\n      ])\r\n      .then(\r\n        axios.spread(() => {\r\n          console.log(\"Evrything is empty!\");\r\n          setIsLoading(false);\r\n        })\r\n      )\r\n      .catch((errors) => {\r\n        console.log(errors);\r\n        setIsLoading(false);\r\n        // react on errors.\r\n      });\r\n\r\n    fetchShiftsList();\r\n    fetchEmployees();\r\n  };\r\n\r\n  const fetchEmployees = async () => {\r\n    const employeesResponse = await axios.get(\"/employees/all\");\r\n    setEmployees(employeesResponse.data);\r\n  };\r\n\r\n  const fetchShiftsList = async () => {\r\n    const shifstListResponse = await axios.get(\"/shifts_list/all\");\r\n    setShiftsList(shifstListResponse.data);\r\n  };\r\n\r\n  const toggleButtons = async (e, day) => {\r\n    e.preventDefault();\r\n    const id = Number(e.target.id);\r\n    setHideButtons(!hideButtons);\r\n    setShowButtonIndex(Number(e.target.id));\r\n    setDay(day);\r\n    setShiftId(id);\r\n    if (!hideButtons)\r\n      await axios.get(`/shifts_list/one/${id}`).then((res) => {\r\n        //find the day that matches the one in database\r\n        const matchDay = Object.keys(res.data).filter((key) => key === day)[0];\r\n        setEmployeeNameInTable(res.data[matchDay]);\r\n        const shiftToBeAdded = res.data.shiftName;\r\n        setShiftToBeAdded(shiftToBeAdded);\r\n      });\r\n  };\r\n\r\n  const addShiftToEmployee = async (employeeId, employeeName) => {\r\n    const shiftObj = {\r\n      day: day,\r\n      shiftName: shiftToBeAdded,\r\n    };\r\n    const dayToBeUpdated = {\r\n      [day]: employeeName,\r\n    };\r\n\r\n    let shiftIdToDelete;\r\n\r\n    if (employeeName !== employeeNameInTable && employeeNameInTable !== null) {\r\n      await axios\r\n        .get(`/employees/find/${employeeNameInTable}`)\r\n        .then(\r\n          (res) =>\r\n            (shiftIdToDelete = res.data.Shifts.filter(\r\n              (shift) => shift.day === day && shift.shiftName === shiftToBeAdded\r\n            )[0].id)\r\n        )\r\n        .catch((err) => console.log(err));\r\n    }\r\n\r\n    const updateDatabase = async () => {\r\n      await axios\r\n        .post(`/shifts/add/${employeeId}`, shiftObj)\r\n        .then(async () => {\r\n          await axios\r\n            .put(`/shifts_list/${shiftId}`, dayToBeUpdated)\r\n            .then(() => {\r\n              fetchShiftsList();\r\n              fetchEmployees();\r\n              setHideButtons(false);\r\n              setShowButtonIndex(\"\");\r\n              setDay(\"\");\r\n              setShiftId(\"\");\r\n            });\r\n        })\r\n        .catch((err) => console.log(err));\r\n    };\r\n\r\n    await axios\r\n      .get(`/employees/one/${employeeId}`)\r\n      .then(async (res) => {\r\n        //check that the employee has only been set to have lunch once in a day\r\n        const checkForLunch = res.data.Shifts.filter(\r\n          (shift) =>\r\n            (shift.shiftName === \"Lunch A\" ||\r\n              shift.shiftName === \"Lunch B\" ||\r\n              shift.shiftName === \"Lunch C\" ||\r\n              shift.shiftName === \"Lunch D\") &&\r\n            shift.day === day &&\r\n            (shiftToBeAdded === \"Lunch A\" ||\r\n              shiftToBeAdded === \"Lunch B\" ||\r\n              shiftToBeAdded === \"Lunch C\" ||\r\n              shiftToBeAdded === \"Lunch D\")\r\n        );\r\n\r\n        //Check for the number of shifts in a day\r\n        const checkForShifts = res.data.Shifts.filter(\r\n          (shift) =>\r\n            shift.day === day &&\r\n            (shift.shiftName !== \"Lunch A\" ||\r\n              shift.shiftName !== \"Lunch B\" ||\r\n              shift.shiftName !== \"Lunch C\" ||\r\n              shift.shiftName !== \"Lunch D\")\r\n        );\r\n\r\n        //Check for how many shifts in a week (No lunch included)\r\n        const checkForShiftsInAWeek = res.data.Shifts.filter(\r\n          (shift) =>\r\n            shift.shiftName !== \"\" &&\r\n            shift.shiftName !== \"Lunch A\" &&\r\n            shift.shiftName !== \"Lunch B\" &&\r\n            shift.shiftName !== \"Lunch C\" &&\r\n            shift.shiftName !== \"Lunch D\"\r\n        );\r\n\r\n        //Check for shifts in a day (No Lunch)\r\n        const checkForShiftsWithNoLunch = res.data.Shifts.filter(\r\n          (shift) =>\r\n            shift.day === day &&\r\n            shift.shiftName !== \"\" &&\r\n            shift.shiftName !== \"Lunch A\" &&\r\n            shift.shiftName !== \"Lunch B\" &&\r\n            shift.shiftName !== \"Lunch C\" &&\r\n            shift.shiftName !== \"Lunch D\"\r\n        );\r\n\r\n        //Check if employee has been assigned to a shift in one place (Morning)\r\n        const checkForTwoPlacesMorning = res.data.Shifts.filter(\r\n          (shift) => shift.shiftName !== \"\" && shift.day === day\r\n        ).filter(\r\n          (shift) =>\r\n            (shift.shiftName === \"Morning Parking Lot\" &&\r\n              (shiftToBeAdded === \"Morning Down Stairs\" ||\r\n                shiftToBeAdded === \"Morning Up Stairs\")) ||\r\n            (shift.shiftName === \"Morning Down Stairs\" &&\r\n              (shiftToBeAdded === \"Morning Parking Lot\" ||\r\n                shiftToBeAdded === \"Morning Up Stairs\")) ||\r\n            (shift.shiftName === \"Morning Up Stairs\" &&\r\n              (shiftToBeAdded === \"Morning Parking Lot\" ||\r\n                shiftToBeAdded === \"Morning Down Stairs\"))\r\n        );\r\n\r\n        const checkForTwoPlacesAfternoonPL = res.data.Shifts.filter(\r\n          (shift) => shift.shiftName !== \"\" && shift.day === day\r\n        ).filter(\r\n          (shift) =>\r\n            shift.shiftName === \"Afternoon Parking Lot\" &&\r\n            (shiftToBeAdded === \"Afternoon Down Stairs\" ||\r\n              shiftToBeAdded === \"Afternoon Up Stairs\")\r\n        );\r\n        const checkForTwoPlacesAfternoonUS = res.data.Shifts.filter(\r\n          (shift) => shift.shiftName !== \"\" && shift.day === day\r\n        ).filter(\r\n          (shift) =>\r\n            shift.shiftName === \"Afternoon Up Stairs\" &&\r\n            (shiftToBeAdded === \"Afternoon Down Stairs\" ||\r\n              shiftToBeAdded === \"Afternoon Parking Lot\")\r\n        );\r\n        const checkForTwoPlacesAfternoonDS = res.data.Shifts.filter(\r\n          (shift) => shift.shiftName !== \"\" && shift.day === day\r\n        ).filter(\r\n          (shift) =>\r\n            shift.shiftName === \"Afternoon Down Stairs\" &&\r\n            (shiftToBeAdded === \"Afternoon Parking Lot\" ||\r\n              shiftToBeAdded === \"Afternoon Up Stairs\")\r\n        );\r\n\r\n        if (\r\n          (shiftToBeAdded === \"Lunch A\" ||\r\n            shiftToBeAdded === \"Lunch B\" ||\r\n            shiftToBeAdded === \"Lunch C\" ||\r\n            shiftToBeAdded === \"Lunch D\") &&\r\n          checkForShiftsWithNoLunch.length === 0\r\n        ) {\r\n          return alert(\r\n            \"You need to assign a shift to a staff member first and then Lunch\"\r\n          );\r\n        }\r\n\r\n        if (\r\n          checkForTwoPlacesMorning.length > 0 ||\r\n          checkForTwoPlacesAfternoonPL.length > 0 ||\r\n          checkForTwoPlacesAfternoonUS.length > 0 ||\r\n          checkForTwoPlacesAfternoonDS.length > 0\r\n        ) {\r\n          return alert(\"Staff member cannot be in two places at once!\");\r\n        }\r\n        if (checkForShifts.length > 2) {\r\n          return alert(\r\n            \"Staff members cannot have more than two shifts per day!\"\r\n          );\r\n        }\r\n        if (checkForLunch.length > 0) {\r\n          return alert(\r\n            \"Staff member has already been assigned to have lunch on this day!\"\r\n          );\r\n        }\r\n        if (checkForShiftsInAWeek.length === 7) {\r\n          return alert(\r\n            \"You cannot assign more than 7 shifts to a staff member in a week!\"\r\n          );\r\n        }\r\n\r\n        if (\r\n          employeeNameInTable !== employeeName &&\r\n          employeeNameInTable !== null\r\n        ) {\r\n          updateDatabase();\r\n          axios\r\n            .delete(`/shifts/delete/${shiftIdToDelete}`)\r\n            .then((res) => console.log(res));\r\n        } else if (employeeNameInTable === null) {\r\n          updateDatabase();\r\n        } else if (employeeNameInTable === employeeName) {\r\n          setHideButtons(false);\r\n          setShowButtonIndex(\"\");\r\n          setDay(\"\");\r\n          setShiftId(\"\");\r\n          return;\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const shifts = shiftsList.map((shift) => {\r\n    return (\r\n      <tr key={shift.id}>\r\n        <td>{shift.shiftName}</td>\r\n        <td>\r\n          <p className=\"m-0 btn-primary\">{shift.monday}</p>\r\n          <button\r\n            className=\"btn btn-info text-light\"\r\n            id={shift.id}\r\n            onClick={(e) => toggleButtons(e, \"monday\")}\r\n          >\r\n            Set Schedule\r\n          </button>\r\n          <div className=\"names-main-container\">\r\n            {hideButtons && showButtonIndex === shift.id && day === \"monday\" ? (\r\n              <div className=\"names-container\">\r\n                {employees.map((employee) => {\r\n                  return (\r\n                    <div className=\"names-container-wrapper\" key={employee.id}>\r\n                      <button\r\n                        className=\"btn-name\"\r\n                        onClick={() =>\r\n                          addShiftToEmployee(employee.id, employee.employeeName)\r\n                        }\r\n                      >\r\n                        {employee.employeeName}\r\n                      </button>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n        </td>\r\n        <td>\r\n          <p className=\"m-0 btn-primary\">{shift.tuesday}</p>\r\n          <button\r\n            className=\"btn btn-info text-light\"\r\n            id={shift.id}\r\n            onClick={(e) => toggleButtons(e, \"tuesday\")}\r\n          >\r\n            Set Schedule\r\n          </button>\r\n          <div className=\"names-main-container\">\r\n            {hideButtons &&\r\n            showButtonIndex === shift.id &&\r\n            day === \"tuesday\" ? (\r\n              <div className=\"names-container\">\r\n                {employees.map((employee) => {\r\n                  return (\r\n                    <div className=\"names-container-wrapper\" key={employee.id}>\r\n                      <button\r\n                        className=\"btn-name\"\r\n                        onClick={() =>\r\n                          addShiftToEmployee(employee.id, employee.employeeName)\r\n                        }\r\n                      >\r\n                        {employee.employeeName}\r\n                      </button>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n        </td>\r\n        <td>\r\n          <p className=\"m-0 btn-primary\">{shift.wednesday}</p>\r\n          <button\r\n            className=\"btn btn-info text-light\"\r\n            id={shift.id}\r\n            onClick={(e) => toggleButtons(e, \"wednesday\")}\r\n          >\r\n            Set Schedule\r\n          </button>\r\n          <div className=\"names-main-container\">\r\n            {hideButtons &&\r\n            showButtonIndex === shift.id &&\r\n            day === \"wednesday\" ? (\r\n              <div className=\"names-container\">\r\n                {employees.map((employee) => {\r\n                  return (\r\n                    <div className=\"names-container-wrapper\" key={employee.id}>\r\n                      <button\r\n                        className=\"btn-name\"\r\n                        onClick={() =>\r\n                          addShiftToEmployee(employee.id, employee.employeeName)\r\n                        }\r\n                      >\r\n                        {employee.employeeName}\r\n                      </button>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n        </td>\r\n        <td>\r\n          <p className=\"m-0 btn-primary\">{shift.thursday}</p>\r\n          <button\r\n            className=\"btn btn-info text-light\"\r\n            id={shift.id}\r\n            onClick={(e) => toggleButtons(e, \"thursday\")}\r\n          >\r\n            Set Schedule\r\n          </button>\r\n          <div className=\"names-main-container\">\r\n            {hideButtons &&\r\n            showButtonIndex === shift.id &&\r\n            day === \"thursday\" ? (\r\n              <div className=\"names-container\">\r\n                {employees.map((employee) => {\r\n                  return (\r\n                    <div className=\"names-container-wrapper\" key={employee.id}>\r\n                      <button\r\n                        className=\"btn-name\"\r\n                        onClick={() =>\r\n                          addShiftToEmployee(employee.id, employee.employeeName)\r\n                        }\r\n                      >\r\n                        {employee.employeeName}\r\n                      </button>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n        </td>\r\n        <td>\r\n          <p className=\"m-0 btn-primary\">{shift.friday}</p>\r\n          <button\r\n            className=\"btn btn-info text-light\"\r\n            id={shift.id}\r\n            onClick={(e) => toggleButtons(e, \"friday\")}\r\n          >\r\n            Set Schedule\r\n          </button>\r\n          <div className=\"names-main-container\">\r\n            {hideButtons && showButtonIndex === shift.id && day === \"friday\" ? (\r\n              <div className=\"names-container\">\r\n                {employees.map((employee) => {\r\n                  return (\r\n                    <div className=\"names-container-wrapper\" key={employee.id}>\r\n                      <button\r\n                        className=\"btn-name\"\r\n                        onClick={() =>\r\n                          addShiftToEmployee(employee.id, employee.employeeName)\r\n                        }\r\n                      >\r\n                        {employee.employeeName}\r\n                      </button>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n        </td>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Spinner isLoading={isLoading}>\r\n      <div className=\"waitList-admin-container\">\r\n        <h4>\r\n          Schedule by Alex Y. Sanabria{\" \"}\r\n          <button onClick={resetWholeSchedule} className=\"btn-danger\">\r\n            Reset Schedule\r\n          </button>\r\n        </h4>\r\n\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n              <th>Shift</th>\r\n              <th>Monday</th>\r\n              <th>Tuesday</th>\r\n              <th>Wednesday</th>\r\n              <th>Thursday</th>\r\n              <th>Friday</th>\r\n            </tr>\r\n            {shifts}\r\n          </tbody>\r\n        </table>\r\n        <TableEmployees employees={employees} />\r\n      </div>\r\n    </Spinner>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n","import React from \"react\";\nimport Table from \"./components/Table\";\n\nconst App = () => {\n  return (\n    <div className=\"text-center mt-2\">\n      <Table />\n    </div>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been pre-cached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}